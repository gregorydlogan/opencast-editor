# This is a basic workflow to help you get started with Actions

name: Build & Deploy

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - main
      - r/*

concurrency:
  group: editor.opencast.org
  cancel-in-progress: false

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      server: ${{ steps.test-server.outputs.server }}
      branch: ${{ steps.branch-name.outputs.branch }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: determine the correct test server
        id: test-server
        run: echo "server=`./.github/get-release-server.sh ${{ github.ref_name }}`" >> $GITHUB_OUTPUT

      - name: Determine branch name
        id: branch-name
        run: |
          #Temp becomes something like r/17.x
          export TEMP=${{ github.ref_name }}
          #Strip the r/ prefix, giving us just 17.x.  If this is main/develop this does nothing
          echo "branch=${TEMP#r\/}" >> $GITHUB_OUTPUT

  main:
    runs-on: ubuntu-latest
    needs: detect
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Clean install
        run: npm ci

      - name: Build App
        run: |
          # This set the editor's datasource to the relevant test server
          sed -i "s#url.*#url = \'http://$SERVER\'#" public/editor-settings.toml
          npm run build
        env:
          SERVER: ${{needs.detect.outputs.server}}
          PUBLIC_URL: ${{needs.detect.outputs.branch}}/editor-ui
          VITE_APP_SETTINGS_PATH: ${{needs.detect.outputs.branch}}/ui/config/editor/editor-settings.toml

      # tests are currently failing
      #- run: npm test
      #  env:
      #    CI: true

      - name: Prepare git
        run: |
          git config --global user.name "Release Bot"
          git config --global user.email "cloud@opencast.org"

      - name: Commit new version
        run: |
          git fetch origin gh-pages
          git checkout gh-pages
          # Update gh-pages
          rm -rf $BRANCH
          mv build $BRANCH
          #Generate an index, in case anyone lands at the root of the test domain
          echo '<html><body><ul>' > index.html
          find . -mindepth 1 -maxdepth 1 -type d \
            | grep '[0-9]*.x\|develop' \
            | sort -r \
            | sed 's/^\(.*\)$/<li><a href=\1>\1<\/a><\/li>/' >> index.html
          echo '</ul></body></html>' >> index.html
          git add $BRANCH index.html
          git diff --staged --quiet || git commit --amend -m "Build $(date)"
        env:
          BRANCH: ${{needs.detect.outputs.branch}}

      - name: Push updates
        run: git push origin gh-pages --force
