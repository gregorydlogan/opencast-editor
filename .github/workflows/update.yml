# This is a basic workflow to help you get started with Actions

name: Build & Deploy

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - main
      - r/*

concurrency:
  group: editor.opencast.org
  cancel-in-progress: false

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Determine branch name
      id: branch-name
      run: |
        #Temp becomes something like r/17.x
        export TEMP=${{ github.ref_name }}
        #Strip the r/ prefix, giving us just 17.x.  If this is main/develop this does nothing
        echo "${TEMP#r\/}" >> $GITHUB_OUTPUT

    - name: determine the correct test server
      id: test-server
      run: ./.github/get-release-server.sh ${{ github.ref_name }} >> $GITHUB_OUTPUT

    - name: Clean install
      run: npm ci

    - name: Build App
      run: |
        # This set the editor's datasource to the relevant test server
        sed -i "s#url.*#url = 'http://${steps.test-server.outputs.*}'#" public/editor-settings.toml
        npm run build
      env:
        PUBLIC_URL: ${steps.branch-name.outputs.*}/editor-ui
        VITE_APP_SETTINGS_PATH: ${steps.branch-name.outputs.*}/ui/config/editor/editor-settings.toml

    # tests are currently failing
    #- run: npm test
    #  env:
    #    CI: true

    - name: Prepare git
      run: |
        git config --global user.name "Release Bot"
        git config --global user.email "cloud@opencast.org"

    - name: Prepare GitHub SSH key
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        install -dm 700 ~/.ssh/
        echo "${DEPLOY_KEY}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan github.com >> ~/.ssh/known_hosts

    - name: Clone repository
      run: |
        git clone "git@github.com:opencast/opencast-editor.git" ~/editor-clone
        cd ~/editor-clone
        git checkout gh-pages

    - name: Commit new version
      run: |
        #Temp becomes something like r/17.x
        export TEMP=${{ github.ref_name }}
        #Strip the r/ prefix, giving us just 17.x.  If this is main/develop this does nothing
        export TARGET=~/editor-clone/${TEMP#r\/}
        # Update gh-pages
        rm -rf $TARGET
        mkdir -p $TARGET
        cp -r build/* $TARGET
        # Add the new build to the repo
        cd ~/editor-clone
        #Generate an index, in case anyone lands at the root of the test domain
        echo '<html><body><ul>' > index.html
        find . -mindepth 1 -maxdepth 1 -type d \
          | grep -v .git \
          | sort -r \
          | sed 's/^\(.*\)$/<li><a href=\1>\1<\/a><\/li>/' >> index.html
        echo '</ul></body></html>' >> index.html
        git add ./*
        git diff --staged --quiet || git commit --amend -m "Build $(date)"

    - name: Push updates
      run: |
        cd ~/editor-clone
        git push origin gh-pages --force
